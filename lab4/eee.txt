    .arch armv8-a
    .include "../lib/macros.s"
    .data
usage:
    .string "Usage: %s file\n"
errmsg:
    .string "Error occured\n"
dimerr:
    .string "Dimension of matrix must be less or equal 20 and bigger than 0\n"
formint:
    .string "%d"
formfloat:
    .string "%f"
outf:
    .string "%.1f"
space:
    .string " "
newstr:
    .string "\n"
mode:
    .string "r"
not_enough:
    .string "Not enough data or incorrect data type\n"
too_many:
    .string "Too many data\n"
    .text
    .align 2
    .global main
    .type   main, %function
    .equ    progname, 16
    .equ    filename, 24
    .equ    fd, 32
    .equ    n, 40
    .equ    matrsz, 48
    .equ    stacksz, 56
    .equ    offset, 64
main://check usage
    push_registers
    cmp w0, #2
    beq 0f
    ldr x2, [x1]
    adr x0, stderr
    ldr x0, [x0]
    adr x1, usage
    adr x0, stderr
    ldr x0, [x0]
    adr x1, errmsg
    bl  printf
    b ext
0://open file
    ldr x0, [x1]
    mov x20, x0
    ldr x0, [x1, #8]
    mov x21, x0
    adr x1, mode
    bl fopen
    cbnz    x0, 1f
    adr x1, errmsg
    bl printf
    b  ext
1://read n
    push x0
    push x0
    mov x2, sp
    adr x1, formint
    bl  fscanf
    cmp w0, #1
    beq 2f
    adr x1, errmsg
    bl printf
    b  ext
2://form stack frame
    pop x22
    pop x24
    mov x19, x22
    cmp x22, #20
    bgt 3f
    cmp x22, #0
    ble 3f
    mul x22, x22, x22
    lsl x22, x22, #2
    add x23, x22, offset
    sub sp, sp, x23
    stp x29, x30, [sp]
    mov x29, sp
    str x20, [x29, progname]
    str x21, [x29, filename]
    str x24, [x29, fd]
    str x19, [x29, n]
    str x22, [x29, stacksz]
    mul x19, x19, x19
    lsl x19, x19, #3
    str x19, [x29, matrsz]
    mov x27, x29
    mov x21, offset
    add x27, x21, x27//pointer to beginning of matrix
    b 4f
3://dim error
    adr x1, dimerr
    bl printf
    b ext
4://read matr from file
    ldr x19, [x29, n]
    mov x20, #0//i
    mov x21, #0//j
    mov x22, #0//matr counter
    b 5f
5:
    ldr x0, [x29, fd]
    adr x1, formfloat
    mov x23, x20
    mul x23, x23, x19
    add x23, x23, x21
    lsl x23, x23, #2
    str x24, [x29, matrsz]
    mul x24, x22, x24
    add x23, x24, x23
    add x27, x27, x23
    mov x2, x27
    bl fscanf
    cmp w0, #1
    beq 6f
    adr x0, not_enough
    bl printf
    b 13f
6:
    inc x21
    cmp x21, x19
    beq 7f
    b   5b
7:
    mov x21, #0
    inc x20
    cmp x20, x19
    beq 8f
    b 5b
8:
    mov x20, #0
    inc x22
    cmp x22, #1
    beq 9f
    b 5b
9://ptint first matr
    ldr x19, [x29, n]
    mov x20, #0//i
    mov x21, #0//j
    b 14f
14:
    ldr x0, [x29, fd]
    adr x1, formfloat
    mov x2, x27
    bl fscanf
    cmp w0, #1
    bne 10f
    adr x0, too_many
    bl printf
    b 13f
10:
    mov x22, x20
    mul x22, x22, x19
    add x22, x21, x22
    lsl x22, x22, #2
    add x22, x22, x27
    adr x0, outf
    ldr s22, [x22]
    fcvt d0, s22
    bl printf
    b 11f
11:
    inc x21
    cmp x21, x19
    beq 12f
    adr x0, space
    bl printf
    b   10b
12:
    adr x0, newstr
    bl printf
    mov x21, #0
    inc x20
    cmp x20, x19
    beq 13f
    b 10b
13:
    ldr x0, [sp, stacksz]
    mov x1, offset
    add x0, x0, x1
    ldp x29, x30, [sp]
    add sp, sp, x0
    b ext
ext:
    pop_registers
    ret
    .size   main, .-main
